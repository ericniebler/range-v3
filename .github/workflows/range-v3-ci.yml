name: range-v3 CI

# Trigger on pushes to all branches and for all pull-requests
on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.container }}

    strategy:
      fail-fast: false
      matrix:
        config:
        # GCC-6
        - {
            name: "Linux GCC 6 Debug (C++14)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "gcc-6", cxx: "g++-6",
            cxx_standard: 14,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 6 Release (C++14)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "gcc-6", cxx: "g++-6",
            cxx_standard: 14,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 6 Debug (C++17)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "gcc-6", cxx: "g++-6",
            cxx_standard: 17,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 6 Release (C++17)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "gcc-6", cxx: "g++-6",
            cxx_standard: 17,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 6 Release (C++17, Concepts)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "gcc-6", cxx: "g++-6",
            cxx_standard: 17,
          }

        # GCC-7
        - {
            name: "Linux GCC 7 Debug (C++14)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "gcc-7", cxx: "g++-7",
            cxx_standard: 14,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 7 Release (C++14)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "gcc-7", cxx: "g++-7",
            cxx_standard: 14,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 7 Debug (C++17)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "gcc-7", cxx: "g++-7",
            cxx_standard: 17,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 7 Release (C++17)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "gcc-7", cxx: "g++-7",
            cxx_standard: 17,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 7 Release (C++17, Concepts)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "gcc-7", cxx: "g++-7",
            cxx_standard: 17,
          }

        # GCC-8
        - {
            name: "Linux GCC 8 Debug (C++14)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "gcc-8", cxx: "g++-8",
            cxx_standard: 14,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 8 Release (C++14)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "gcc-8", cxx: "g++-8",
            cxx_standard: 14,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 8 Debug (C++17)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "gcc-8", cxx: "g++-8",
            cxx_standard: 17,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 8 Release (C++17)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "gcc-8", cxx: "g++-8",
            cxx_standard: 17,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 8 Release (C++17, Concepts)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "gcc-8", cxx: "g++-8",
            cxx_standard: 17,
          }

        # GCC-9
        - {
            name: "Linux GCC 9 Debug (C++17)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: Debug,
            cc: "gcc-9", cxx: "g++-9",
            cxx_standard: 17,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 9 Release (C++17)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: RelWithDebInfo,
            cc: "gcc-9", cxx: "g++-9",
            cxx_standard: 17,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 9 Debug (C++20)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: Debug,
            cc: "gcc-9", cxx: "g++-9",
            cxx_standard: 20,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 9 Release (C++20)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: RelWithDebInfo,
            cc: "gcc-9", cxx: "g++-9",
            cxx_standard: 20,
            cxx_concepts: false
          }
        - {
            name: "Linux GCC 9 Release (C++20, Concepts)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: RelWithDebInfo,
            cc: "gcc-9", cxx: "g++-9",
            cxx_standard: 20,
          }

        # GCC-10
        - {
            name: "Linux GCC 10 Debug (C++20, Concepts)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: Debug,
            cc: "gcc-10", cxx: "g++-10",
            cxx_standard: 20
          }
        - {
            name: "Linux GCC 10 Release (C++20, Concepts)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            build_type: RelWithDebInfo,
            cc: "gcc-10", cxx: "g++-10",
            cxx_standard: 20
          }

        # Clang-5.0
        - {
            name: "Linux Clang 5.0 Debug (C++14 / libc++ / ASAN)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "clang-5.0", cxx: "clang++-5.0",
            cxx_standard: 14,
            cxx_asan: true,
            libcxx: true
          }
        - {
            name: "Linux Clang 5.0 Debug (C++17 / ASAN)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "clang-5.0", cxx: "clang++-5.0",
            cxx_standard: 17,
            cxx_asan: true,
          }

        # Clang-6.0
        - {
            name: "Linux Clang 6.0 Debug (C++14 / libc++ / ASAN)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "clang-6.0", cxx: "clang++-6.0",
            cxx_standard: 14,
            cxx_asan: true,
            libcxx: true
          }
        - {
            name: "Linux Clang 6.0 Debug (C++17 / ASAN)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "clang-6.0", cxx: "clang++-6.0",
            cxx_standard: 17,
            cxx_asan: true,
          }

        # Clang-8
        - {
            name: "Linux Clang 8 Debug (C++14 / libc++ / ASAN)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "clang-8", cxx: "clang++-8",
            cxx_standard: 14,
            cxx_asan: true,
            libcxx: true
          }
        - {
            name: "Linux Clang 8 Debug (C++17 / ASAN)", artifact: "Linux.tar.xz",
            os: ubuntu-20.04,
            build_type: Debug,
            cc: "clang-8", cxx: "clang++-8",
            cxx_standard: 17,
            cxx_asan: true,
          }

        # Clang-9
        - {
            name: "Linux Clang 9 Debug (C++17 / ASAN)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "clang-9", cxx: "clang++-9",
            cxx_standard: 17,
            cxx_asan: true,
          }
        - {
            name: "Linux Clang 9 Release (C++17)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "clang-9", cxx: "clang++-9",
            cxx_standard: 17,
          }

        # Clang-10
        - {
            name: "Linux Clang 10 Debug (C++20 / ASAN)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: Debug,
            cc: "clang-10", cxx: "clang++-10",
            cxx_standard: 20,
            cxx_asan: true,
            cxx_concepts: false
          }
        - {
            name: "Linux Clang 10 Release (C++20 / Concepts)", artifact: "Linux.tar.xz",
            os: ubuntu-latest,
            container: "ubuntu:18.04",
            build_type: RelWithDebInfo,
            cc: "clang-10", cxx: "clang++-10",
            cxx_standard: 20,
          }

        # AppleClang
        - {
            name: "macOS Clang Debug (C++17)", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: Debug,
            cc: "clang", cxx: "clang++",
            cxx_standard: 17,
            cxx_asan: true,
          }
        - {
            name: "macOS Clang Release (C++17)", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: RelWithDebInfo,
            cc: "clang", cxx: "clang++",
            cxx_standard: 17,
          }
        - {
            name: "macOS Clang Debug (C++20 / ASAN)", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: Debug,
            cc: "clang", cxx: "clang++",
            cxx_standard: 20,
            cxx_asan: true,
          }
        - {
            name: "macOS Clang Release (C++20)", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: RelWithDebInfo,
            cc: "clang", cxx: "clang++",
            cxx_standard: 20,
          }

        # MSVC 2022
        - {
            name: "Windows MSVC 2022 Debug (C++17) / ASAN", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: Debug,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            cxx_standard: 17,
            cxx_asan: true,
          }
        - {
            name: "Windows MSVC 2022 Release (C++17)", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: RelWithDebInfo,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            cxx_standard: 17,
          }
        - {
            name: "Windows MSVC 2022 Debug (C++20) / ASAN", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: Debug,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            cxx_standard: 20,
            cxx_asan: true,
          }
        - {
            name: "Windows MSVC 2022 Release (C++20)", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest,
            build_type: RelWithDebInfo,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            cxx_standard: 20,
          }

    steps:
    - uses: actions/checkout@v4

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.16.2'

    - name: Install GCC or Clang
      id: install_gcc_clang
      if: startsWith(matrix.config.os, 'ubuntu')
      shell: bash
      working-directory: ${{ env.HOME }}
      run: |
        sudo apt-get install -y ${{matrix.config.cc}} ${{matrix.config.cxx}}

    - name: Install libc++
      id: install_libcxx
      if: matrix.config.libcxx
      shell: bash
      working-directory: ${{ env.HOME }}
      env:
        CC: ${{ matrix.config.cc }}
        CXX: ${{ matrix.config.cxx }}
      run: |
        $GITHUB_WORKSPACE/install_libcxx.sh

    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          set(cxx_flags "/nologo /permissive- /EHsc")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")

        if ("x${{ matrix.config.libcxx }}" STREQUAL "xtrue")
          set(cxx_flags "${cxx_flags} -stdlib=libc++ -nostdinc++ -cxx-isystem $ENV{GITHUB_WORKSPACE}/llvm/include/c++/v1/ -Wno-unused-command-line-argument")
          set(link_flags "${link_flags} -L $ENV{GITHUB_WORKSPACE}/llvm/lib -Wl,-rpath,$ENV{GITHUB_WORKSPACE}/llvm/lib -lc++abi")
        endif()

        if ("${{ matrix.config.cxx }}" MATCHES "clang.*")
            # clang spurious warning on <=> use
            set(cxx_flags "${cxx_flags} -Wno-zero-as-null-pointer-constant")
        endif()

        if ("x${{ matrix.config.cxx_asan }}" STREQUAL "xtrue")
          set(cxx_flags "${cxx_flags} -fsanitize=address")
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(link_flags "${link_flags} /INFERASANLIBS /INCREMENTAL:NO")
          else()
            set(cxx_flags "${cxx_flags} -fno-omit-frame-pointer")
          endif()
        endif()

        set(cxx_concepts ON)
        if ("x${{ matrix.config.cxx_concepts }}" STREQUAL "xfalse")
          set(cxx_concepts OFF)
        endif()

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(link_flags "${link_flags} /NOLOGO")
        endif()

        execute_process(
          COMMAND cmake
            -S .
            -B build
            -G Ninja
            -D CMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
            -D CMAKE_MAKE_PROGRAM:STRING=ninja
            -D CMAKE_CXX_STANDARD:STRING=${{ matrix.config.cxx_standard }}
            -D "CMAKE_CXX_FLAGS:STRING=${cxx_flags}"
            -D "CMAKE_EXE_LINKER_FLAGS:STRING=${link_flags}"
            -D CMAKE_VERBOSE_MAKEFILE:BOOL=ON
            -D RANGE_V3_HEADER_CHECKS:BOOL=ON
            -D RANGES_PREFER_REAL_CONCEPTS:BOOL=${cxx_concepts}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      continue-on-error: ${{ matrix.config.experimental || false }}
      run: |
        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")

        execute_process(
          COMMAND cmake --build build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Run tests
      shell: cmake -P {0}
      continue-on-error: ${{ matrix.config.experimental || false }}
      run: |
        include(ProcessorCount)
        ProcessorCount(N)

        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        execute_process(
          COMMAND ctest --verbose -j ${N}
          WORKING_DIRECTORY build
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Running tests failed!")
        endif()
